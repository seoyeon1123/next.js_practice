generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}


model User {
  id Int @id @default(autoincrement())
  username String @unique
  email String? @unique
  password String? @unique
  phone String? @unique
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  SMSToken SMSToken[]
  Product Product[]
  Post Post[]
  like Like[]
  commnet Comment[]
}

model SMSToken  {
  id Int @id @default(autoincrement())
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  token String @unique

  user User @relation( fields: [userId], references: [id])
  userId Int
}

model Product {
  id Int @id @default(autoincrement())
  title String
  price Float
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  description String
  photo String 
  user User @relation(fields: [userId], references: [id])
  userId Int

}

//posts, like, comment

model Post  {
  id Int @id @default(autoincrement())
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  title String
  description String
  views Int @default(0)
  user User @relation(fields: [userId], references: [id])
  userId Int

  comment Comment[]
  like Like[]
}

model Comment {
  id Int @id @default(autoincrement())
  payload String

  user User @relation(fields: [userId], references: [id],onDelete: Cascade)
  userId Int

  post Post @relation(fields: [postId], references: [id],onDelete: Cascade)
  postId Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

}

model Like {
 @@id(name : "id", [userId, postId])

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user User @relation(fields: [userId], references: [id],onDelete: Cascade)
  userId Int

  post Post @relation(fields: [postId], references: [id],onDelete: Cascade)
  postId Int


}